---
import companyFavicon from "../assets/branding/company/tower.svg";
import { productFromUrl } from "../lib/products";

export interface Props {
	title: string;
	description: string;
	image?: string | undefined;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/social/common@2x.png" } = Astro.props;

const product = productFromUrl(canonicalURL);
const favicon = product?.favicon ?? companyFavicon;
const faviconType = favicon.endsWith(".ico") ? "image/x-icon" : "image/svg+xml";
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type={faviconType} href={favicon} />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="theme-color" content="#e62755" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Plausible analytics -->
<script
	defer
	data-domain="labs.leaningtech.com"
	src="https://plausible.leaningtech.com/js/script.manual.pageview-props.js"
></script>
<script>
	window.plausible =
		window.plausible ||
		function () {
			// @ts-ignore
			(window.plausible.q = window.plausible.q || []).push(arguments);
		};

	import { onCLS, onINP, onLCP, onTTFB, type Metric } from "web-vitals";

	const queue: Set<Metric> = new Set();
	function addToQueue(metric: Metric) {
		queue.add(metric);
	}

	addEventListener("visibilitychange", () => {
		if (document.visibilityState === "hidden") {
			flushQueue();
		}
	});

	// Safari
	addEventListener("pagehide", flushQueue);

	onCLS(addToQueue);
	onINP(addToQueue); // replaces FID in March 2024
	onLCP(addToQueue);
	onTTFB(addToQueue);

	function flushQueue() {
		const metrics = Array.from(queue).reduce(
			(acc, metric) => {
				acc[metric.name] = metric.value;
				return acc;
			},
			{} as Record<string, number>,
		);

		console.info("Web Vitals", metrics);

		plausible("pageview", {
			props: {
				...metrics,
			},
		});
		queue.clear();
	}
</script>
