---
import { type Mode, type Group, idToTitle } from "../lib/nav";
import productLogotype from "../assets/branding/products/cheerp/logotype-white.svg";
import { Icon } from "astro-icon";

interface Props {
	product: string;
	mode: Mode;
	groups: Group[];
}

const { product, mode, groups } = Astro.props;
const pathname = Astro.url.pathname.replace(".html", "");

const modes: { mode: Mode; name: string; icon: string }[] = [
	{
		mode: "guides",
		name: "How-to guides",
		icon: "ðŸ¤”",
	},
	{
		mode: "tutorials",
		name: "Tutorials",
		icon: "ðŸ“š",
	},
	{
		mode: "reference",
		name: "Reference",
		icon: "ðŸ“–",
	},
	{
		mode: "explanation",
		name: "Explanation",
		icon: "ðŸ§ ",
	},
];
---

<aside
	is="docs-sidebar"
	class="bg-stone-800 lg:bg-stone-900 fixed z-10 px-8 w-96 lg:w-80 h-[calc(100vh-4rem)] overflow-y-auto lg:text-sm"
>
	<a
		href={`/${product}`}
		class="block pt-8 pb-4 mb-4 lg:sticky top-0 lg:bg-stone-900 lg:shadow-lg lg:shadow-stone-900"
	>
		<img src={productLogotype} alt="Cheerp" class="h-12 mx-auto" />
	</a>

	<button data-sidebar-close class="absolute top-4 right-4 lg:hidden">
		<span class="sr-only">Close navigation</span>
		<Icon name="jam:close" class="w-6 h-6 text-stone-400 hover:text-white" />
	</button>

	<ul class="leading-8 font-semibold mb-4 text-base space-y-2">
		{
			modes.map((item) => (
				<li>
					<a
						href={`/${product}/${item.mode}`}
						class:list={[
							"group flex items-center gap-4 text-stone-400 hover:text-white",
							{
								"!text-cheerp": item.mode === mode,
							},
						]}
					>
						<span
							class:list={[
								"bg-stone-800 group-hover:bg-stone-700 w-8 h-8 rounded-md flex items-center justify-center text-xl",
								{
									"!bg-cheerp": item.mode === mode,
								},
							]}
						>
							{item.icon}
						</span>
						<span>{item.name}</span>
					</a>
				</li>
			))
		}
	</ul>

	<ul>
		{
			groups.map((group) => {
				return (
					<li class="py-4">
						<h5 class="mb-2 font-semibold text-slate-100">{group.title}</h5>
						<ul>
							{group.entries.map((entry) => {
								const href = `/${product}/${entry.slug}`;
								const isActive = href === pathname;

								return (
									<li
										class:list={[
											"group px-4 py-1 border-l border-stone-800 text-stone-400 hover:border-stone-400 hover:text-white",
											{
												"font-semibold !text-primary-500 !border-primary-600 bg-primary-600 bg-opacity-5":
													isActive,
											},
										]}
										data-is-active={isActive}
									>
										<a {href} class="block">
											{idToTitle(entry.id)}
										</a>
									</li>
								);
							})}
						</ul>
					</li>
				);
			})
		}
	</ul>
</aside>

<div class="w-80 h-screen px-8 hidden lg:block">
	<!-- Take up fixed space -->
</div>

<script>
	function loadPos(): number {
		const pos = parseFloat(
			sessionStorage.getItem("docs-sidebar-scroll") || "0",
		);
		if (isNaN(pos)) return 0;
		return pos;
	}

	function savePos(pos: number) {
		sessionStorage.setItem("docs-sidebar-scroll", pos.toString());
	}

	class DocsSidebar extends HTMLElement {
		constructor() {
			super();

			// Maintain scroll position across page reloads
			this.scrollTop = loadPos();
			window.addEventListener("beforeunload", () => {
				savePos(this.scrollTop);
			});

			// If the active item is out of view, scroll so it is in the center
			const activeEl = this.querySelector<HTMLLIElement>("li[data-is-active]");
			if (activeEl) {
				const scrollRect = this.getBoundingClientRect();
				const activeRect = activeEl.getBoundingClientRect();

				const top = activeEl.offsetTop;
				const bottom = top - scrollRect.height + activeRect.height;

				if (this.scrollTop > top || this.scrollTop < bottom) {
					this.scrollTop = top - scrollRect.height / 2 + activeRect.height / 2;
				}
			} else {
				console.warn("docs-sidebar didn't find active link");
			}
		}
	}

	customElements.define("docs-sidebar", DocsSidebar, { extends: "aside" });
</script>
